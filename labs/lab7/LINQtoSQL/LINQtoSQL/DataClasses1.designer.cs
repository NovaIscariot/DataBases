#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQtoSQL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="myDb")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCourierTable(CourierTable instance);
    partial void UpdateCourierTable(CourierTable instance);
    partial void DeleteCourierTable(CourierTable instance);
    partial void InsertDeliveryTable(DeliveryTable instance);
    partial void UpdateDeliveryTable(DeliveryTable instance);
    partial void DeleteDeliveryTable(DeliveryTable instance);
    partial void InsertDoneDeliveryTable(DoneDeliveryTable instance);
    partial void UpdateDoneDeliveryTable(DoneDeliveryTable instance);
    partial void DeleteDoneDeliveryTable(DoneDeliveryTable instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::LINQtoSQL.Properties.Settings.Default.myDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CourierTable> CourierTable
		{
			get
			{
				return this.GetTable<CourierTable>();
			}
		}
		
		public System.Data.Linq.Table<DeliveryTable> DeliveryTable
		{
			get
			{
				return this.GetTable<DeliveryTable>();
			}
		}
		
		public System.Data.Linq.Table<DoneDeliveryTable> DoneDeliveryTable
		{
			get
			{
				return this.GetTable<DoneDeliveryTable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourierTable")]
	public partial class CourierTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.Nullable<int> _CurrentDelivery;
		
		private int _Age;
		
		private int _Experience;
		
		private EntitySet<DeliveryTable> _DeliveryTable1;
		
		private EntitySet<DoneDeliveryTable> _DoneDeliveryTable;
		
		private EntityRef<DeliveryTable> _DeliveryTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCurrentDeliveryChanging(System.Nullable<int> value);
    partial void OnCurrentDeliveryChanged();
    partial void OnAgeChanging(int value);
    partial void OnAgeChanged();
    partial void OnExperienceChanging(int value);
    partial void OnExperienceChanged();
    #endregion
		
		public CourierTable()
		{
			this._DeliveryTable1 = new EntitySet<DeliveryTable>(new Action<DeliveryTable>(this.attach_DeliveryTable1), new Action<DeliveryTable>(this.detach_DeliveryTable1));
			this._DoneDeliveryTable = new EntitySet<DoneDeliveryTable>(new Action<DoneDeliveryTable>(this.attach_DoneDeliveryTable), new Action<DoneDeliveryTable>(this.detach_DoneDeliveryTable));
			this._DeliveryTable = default(EntityRef<DeliveryTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentDelivery", DbType="Int")]
		public System.Nullable<int> CurrentDelivery
		{
			get
			{
				return this._CurrentDelivery;
			}
			set
			{
				if ((this._CurrentDelivery != value))
				{
					if (this._DeliveryTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentDeliveryChanging(value);
					this.SendPropertyChanging();
					this._CurrentDelivery = value;
					this.SendPropertyChanged("CurrentDelivery");
					this.OnCurrentDeliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Age", DbType="Int NOT NULL")]
		public int Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Experience", DbType="Int NOT NULL")]
		public int Experience
		{
			get
			{
				return this._Experience;
			}
			set
			{
				if ((this._Experience != value))
				{
					this.OnExperienceChanging(value);
					this.SendPropertyChanging();
					this._Experience = value;
					this.SendPropertyChanged("Experience");
					this.OnExperienceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourierTable_DeliveryTable", Storage="_DeliveryTable1", ThisKey="Id", OtherKey="CourierId")]
		public EntitySet<DeliveryTable> DeliveryTable1
		{
			get
			{
				return this._DeliveryTable1;
			}
			set
			{
				this._DeliveryTable1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourierTable_DoneDeliveryTable", Storage="_DoneDeliveryTable", ThisKey="Id", OtherKey="CourierId")]
		public EntitySet<DoneDeliveryTable> DoneDeliveryTable
		{
			get
			{
				return this._DoneDeliveryTable;
			}
			set
			{
				this._DoneDeliveryTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryTable_CourierTable", Storage="_DeliveryTable", ThisKey="CurrentDelivery", OtherKey="Id", IsForeignKey=true)]
		public DeliveryTable DeliveryTable
		{
			get
			{
				return this._DeliveryTable.Entity;
			}
			set
			{
				DeliveryTable previousValue = this._DeliveryTable.Entity;
				if (((previousValue != value) 
							|| (this._DeliveryTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DeliveryTable.Entity = null;
						previousValue.CourierTable.Remove(this);
					}
					this._DeliveryTable.Entity = value;
					if ((value != null))
					{
						value.CourierTable.Add(this);
						this._CurrentDelivery = value.Id;
					}
					else
					{
						this._CurrentDelivery = default(Nullable<int>);
					}
					this.SendPropertyChanged("DeliveryTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeliveryTable1(DeliveryTable entity)
		{
			this.SendPropertyChanging();
			entity.CourierTable1 = this;
		}
		
		private void detach_DeliveryTable1(DeliveryTable entity)
		{
			this.SendPropertyChanging();
			entity.CourierTable1 = null;
		}
		
		private void attach_DoneDeliveryTable(DoneDeliveryTable entity)
		{
			this.SendPropertyChanging();
			entity.CourierTable = this;
		}
		
		private void detach_DoneDeliveryTable(DoneDeliveryTable entity)
		{
			this.SendPropertyChanging();
			entity.CourierTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeliveryTable")]
	public partial class DeliveryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _CourierId;
		
		private string _Address;
		
		private EntitySet<CourierTable> _CourierTable;
		
		private EntityRef<CourierTable> _CourierTable1;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourierIdChanging(System.Nullable<int> value);
    partial void OnCourierIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public DeliveryTable()
		{
			this._CourierTable = new EntitySet<CourierTable>(new Action<CourierTable>(this.attach_CourierTable), new Action<CourierTable>(this.detach_CourierTable));
			this._CourierTable1 = default(EntityRef<CourierTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourierId", DbType="Int")]
		public System.Nullable<int> CourierId
		{
			get
			{
				return this._CourierId;
			}
			set
			{
				if ((this._CourierId != value))
				{
					if (this._CourierTable1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourierIdChanging(value);
					this.SendPropertyChanging();
					this._CourierId = value;
					this.SendPropertyChanged("CourierId");
					this.OnCourierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="DeliveryTable_CourierTable", Storage="_CourierTable", ThisKey="Id", OtherKey="CurrentDelivery")]
		public EntitySet<CourierTable> CourierTable
		{
			get
			{
				return this._CourierTable;
			}
			set
			{
				this._CourierTable.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourierTable_DeliveryTable", Storage="_CourierTable1", ThisKey="CourierId", OtherKey="Id", IsForeignKey=true)]
		public CourierTable CourierTable1
		{
			get
			{
				return this._CourierTable1.Entity;
			}
			set
			{
				CourierTable previousValue = this._CourierTable1.Entity;
				if (((previousValue != value) 
							|| (this._CourierTable1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourierTable1.Entity = null;
						previousValue.DeliveryTable1.Remove(this);
					}
					this._CourierTable1.Entity = value;
					if ((value != null))
					{
						value.DeliveryTable1.Add(this);
						this._CourierId = value.Id;
					}
					else
					{
						this._CourierId = default(Nullable<int>);
					}
					this.SendPropertyChanged("CourierTable1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourierTable(CourierTable entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryTable = this;
		}
		
		private void detach_CourierTable(CourierTable entity)
		{
			this.SendPropertyChanging();
			entity.DeliveryTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DoneDeliveryTable")]
	public partial class DoneDeliveryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CourierId;
		
		private string _Address;
		
		private EntityRef<CourierTable> _CourierTable;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCourierIdChanging(int value);
    partial void OnCourierIdChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public DoneDeliveryTable()
		{
			this._CourierTable = default(EntityRef<CourierTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourierId", DbType="Int NOT NULL")]
		public int CourierId
		{
			get
			{
				return this._CourierId;
			}
			set
			{
				if ((this._CourierId != value))
				{
					if (this._CourierTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourierIdChanging(value);
					this.SendPropertyChanging();
					this._CourierId = value;
					this.SendPropertyChanged("CourierId");
					this.OnCourierIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CourierTable_DoneDeliveryTable", Storage="_CourierTable", ThisKey="CourierId", OtherKey="Id", IsForeignKey=true)]
		public CourierTable CourierTable
		{
			get
			{
				return this._CourierTable.Entity;
			}
			set
			{
				CourierTable previousValue = this._CourierTable.Entity;
				if (((previousValue != value) 
							|| (this._CourierTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CourierTable.Entity = null;
						previousValue.DoneDeliveryTable.Remove(this);
					}
					this._CourierTable.Entity = value;
					if ((value != null))
					{
						value.DoneDeliveryTable.Add(this);
						this._CourierId = value.Id;
					}
					else
					{
						this._CourierId = default(int);
					}
					this.SendPropertyChanged("CourierTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
